printf("Задача 5\n");
# определим вектор коэффициентов при уравнении, максимум которого нужно найти
C = [2; 3;];
# определим слау из коэф-ов системы неравенств
A = [10 6; 6 20; 8 15];
# запишем правые части неравенств в вектор
B = [600; 600; 600];
# определим типы неравенств
ctype = "UUU";
# определим тип искомых переменных (целые числа) и тип задачи (максимизация)
vartype = "II"; sense = -1;

[x, f, errnum, extra] = glpk(C, A, B, [0; 0], [], ctype, vartype, sense)

printf("%d\n", x);

printf("---\nЗадача 29\n");
# определим вектор коэффициентов при уравнении, минимум которого нужно найти
C = [5; 7; 3; 4; 2; 5; 6; 9; 7; 8; 4; 5];
# определим слау из коэф-ов системы уравнений
A = [1 1 1 1 0 0 0 0 0 0 0 0;
     0 0 0 0 1 1 1 1 0 0 0 0;
     0 0 0 0 0 0 0 0 1 1 1 1;
     1 0 0 0 1 0 0 0 1 0 0 0;
     0 1 0 0 0 1 0 0 0 1 0 0;
     0 0 1 0 0 0 1 0 0 0 1 0;
     0 0 0 1 0 0 0 1 0 0 0 1];
# запишем правые части уравнений
B = [120; 60; 100; 70; 90; 50; 70];
ctype = "SSSSSSS";
# укажем тип 12 переменных (целые числа) и тип задачи (минимизация)
vartype = "IIIIIIIIIIII";
sense = 1;

[x, f, errnum, extra] = glpk(C, A, B, zeros(1, 12), [], ctype, vartype, sense)

for i = [0 1 2]
  printf("%-2d  ", x(1 + i * 4: (i + 1) * 4));
  printf("\n");
end
